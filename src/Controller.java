/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 *
 * @author yashkir
 */
public class Controller {
    private UserView localUserView;
    private static boolean initialized = false;

    /**
     * Constructor for View Class
     */
    public Controller(UserView localUserView){
        this.localUserView = localUserView;
    }
    /**
     * Constructor for classes which need utiltiy methods
     */
    public Controller() {

    }
    /**
    * Connects FileLoader to FileLoaderDialog
    */
    public void loadFile(String path, String fileType){
        if (fileType == "elv"){
            FileLoader.readELV(path);
        }
        else if (fileType == "spc") {
            FileLoader.readSPC(path);
        }
        else if (fileType == "pdb") {
            if (path.contains("undergrowth")){
                FileLoader.readPdbUnder(path);
            }
            else if (path.contains("canopy")){
                FileLoader.readPdbCan(path);
            }
        }
        System.gc(); //clean arbitrary trash to optimise performance

    }

    /**
     * Disables control panel and settings menu on start to restrict the user to only entering files or exiting
     */
    public void restrictControls(boolean restricted){
        UserView.chbControlsList.setEnabled(!restricted);

    }

    /**
    * Used in determining whether EcoViz has been opened for the first time
    * Setter for initialized boolean
    */
    public static void setInitialization(boolean value){
        initialized = value;
    }
    /**
    * Used in determining whether EcoViz has been opened for the first time
    * Getter for initialized boolean
    */
    public static boolean checkInitialization(){
        return initialized;
    }


    /**
     * Displays a loading screen window
     * @param parentFrame
     */
    public void showLoadingScreen(java.awt.Frame parentFrame) throws IOException {
        
        closeLoadingScreenAfterTime(4).start();
        
        JOptionPane.showOptionDialog(parentFrame, "Loading files, please wait...","Initializing EcoViz", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);
        //initializeTerrainGrid();
    }

    /**
    *Temporary utility method for detecting if dialog is open that is needed to be closed.
    *Creates a new timer thread to emulate loading time
    */
    private static Timer closeLoadingScreenAfterTime(int seconds) {
        ActionListener close = (ActionEvent e) -> {
            Window[] windows = Window.getWindows();
            for (Window window : windows) {
                if (window instanceof JDialog) {
                    JDialog dialog = (JDialog) window;
                    if (dialog.getContentPane().getComponentCount() == 1
                            && dialog.getContentPane().getComponent(0) instanceof JOptionPane){
                        dialog.dispose();
                    }
                }
            }
        };
        Timer t = new Timer(seconds * 1000, close);
        t.setRepeats(false);
        return t;
    }

    public void print(String s){
        System.out.println("Controller: "+s);
    }

    /**
     * Generates the terrain visualisation and embeds it in a JLabel
     * @throws IOException
     */
    public void initializeTerrainGrid() throws IOException {
        print("initializeTerrainGrid");
        restrictControls(false);
        UserView.pnlVizualizer.setGrid(new Grid(FileLoader.getDimx(),FileLoader.getDimy(),FileLoader.getSpacing(),FileLoader.getLatitude(), FileLoader.getTerrain()));
        updateView();
        UserView.pnlVizualizer.setPlants();
    }

    public BufferedImage buildGrid() throws IOException {
        Grid grid = new Grid(FileLoader.getDimx(),FileLoader.getDimy(),FileLoader.getSpacing(),FileLoader.getLatitude(), FileLoader.getTerrain());
        return grid.getGreyscale();
    }
    /**
     * fetches the species list generated by the FileLoader class and displays it to the tabbed
     * Filter pane
     * @param list
     */
    public void getSpeciesList(String[][] list){
        DefaultListModel<String> listModel = new DefaultListModel<String>();
        for (int i = 0; i < list.length; i++) {
            listModel.addElement(list[i][0].toString());
        }
        UserView.getlistFilterSpecies().setModel(listModel);
    }
    /**
     * Fetches the genus list generated by the FileLoader class and displays it to the tabbed
     * Filter pane
     * @param list
     */
    public void getGenusList(String[][] list){
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (int i = 0; i < list.length; i++) {
            //System.out.println(list[i][1]);
            String genus = list[i][1].split(" ")[0];
            if(!listModel.contains(genus.toString())){
                listModel.addElement(genus);
            }
        }
        UserView.getlistFilterGenus().setModel(listModel);
    }

    public void setVisualizerCursor(int handCursor) {
        UserView.pnlVizualizer.setCursor(Cursor.getPredefinedCursor(handCursor));
    }

    public void updateView(){
        print("updateView");
        if(!initialized){
            UserView.setPlantHeightSliderValues(FileLoader.getMinPlantHeight(),FileLoader.getMaxPlantHeight());
            setVisualizerCursor(Cursor.HAND_CURSOR);
            initialized = true;
        }
        getGenusList(FileLoader.getSpcKey());
        getSpeciesList(FileLoader.getSpcKey());
        UserView.pnlVizualizer.revalidate();
        UserView.pnlVizualizer.repaint();

    }

}



