/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import static java.lang.Thread.currentThread;

/**
 *
 * @author yashkir
 */
public class UserView extends JFrame{

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.JComboBox<String> cbxSimulationType;
    private javax.swing.JCheckBox chbCanopy;
    private javax.swing.JCheckBox chbUndergrowth;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblPlantHeightSlider;
    private javax.swing.JLabel lblPlantHeightValue;
    private javax.swing.JLabel lblSimType;
    private javax.swing.JLabel lblSimulation;
    private javax.swing.JLabel lblThreshold;
    private javax.swing.JLabel lblZoom;
    private javax.swing.JMenu mbFIleOption;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miLoadFIles;
    private javax.swing.JMenuItem miRestart;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JPanel pnlSimControls;
    private javax.swing.JSpinner sldRenderingThreshold;
    private javax.swing.JScrollPane tabFilterPlants;
    private javax.swing.JScrollPane tabFilterSpecies;
    private javax.swing.JTabbedPane tabbedFilterPane;
    // End of variables declaration//GEN-END:variables

    //Protected Static components
    protected static VizPanel pnlVizualizer;
    protected static javax.swing.JSlider sldPlantHeight;
    protected static javax.swing.JList<String> listFilterPlants;
    protected static javax.swing.JList<String> listFilterSpecies;

    //Self-declared Variables
    public static Controller localController;
    private boolean selectedSimType = false;
    private static int windX;
    private static int windY;
    /**
     * Creates new form UserView
     */
    public UserView() {
        initComponents();
       // this.setResizable(false);
        localController = new Controller(this);
        localController.setVisualizerCursor(Cursor.DEFAULT_CURSOR);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlVizualizer = new VizPanel();
        jPanel1 = new javax.swing.JPanel();
        btnZoomOut = new javax.swing.JButton();
        lblZoom = new javax.swing.JLabel();
        btnZoomIn = new javax.swing.JButton();
        pnlControls = new javax.swing.JPanel();
        tabbedFilterPane = new javax.swing.JTabbedPane();
        tabFilterSpecies = new javax.swing.JScrollPane();
        listFilterSpecies = new javax.swing.JList<String>();
        tabFilterPlants = new javax.swing.JScrollPane();
        listFilterPlants = new javax.swing.JList<String>();
        sldPlantHeight = new javax.swing.JSlider();
        lblPlantHeightSlider = new javax.swing.JLabel();
        lblSimulation = new javax.swing.JLabel();
        lblSimType = new javax.swing.JLabel();
        cbxSimulationType = new javax.swing.JComboBox<String>();
        pnlSimControls = new javax.swing.JPanel();
        chbUndergrowth = new javax.swing.JCheckBox();
        chbCanopy = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        lblThreshold = new javax.swing.JLabel();
        lblPlantHeightValue = new javax.swing.JLabel();
        sldRenderingThreshold = new javax.swing.JSpinner();
        menuBar = new javax.swing.JMenuBar();
        mbFIleOption = new javax.swing.JMenu();
        miLoadFIles = new javax.swing.JMenuItem();
        miRestart = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();



        windX = 0;
        windY = 0;

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("EcoViz");

        pnlVizualizer.setName(""); // NOI18N

        /**Editing Here**/

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblZoom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnZoomOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnZoomIn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnZoomOut)
                                        .addComponent(lblZoom))
                                .addContainerGap())
        );

        javax.swing.GroupLayout pnlVizualizerLayout = new javax.swing.GroupLayout(pnlVizualizer);
        pnlVizualizer.setLayout(pnlVizualizerLayout);
        pnlVizualizerLayout.setHorizontalGroup(
                pnlVizualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlVizualizerLayout.createSequentialGroup()
                                .addGap(0, 1024, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlVizualizerLayout.setVerticalGroup(
                pnlVizualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlVizualizerLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        /** End **/
        pnlControls.setBorder(BorderFactory.createEtchedBorder());
        pnlControls.setForeground(new Color(56, 60, 74));

        btnZoomIn.setText("+");

        listFilterSpecies.setModel(new AbstractListModel<String>() {
            String[] strings = { "Plants will be ", "listed here once ", "visualization files", "have been loaded" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listFilterSpecies.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent evt) {
                jListSpeciesSelect(evt);
            }
        });
        tabFilterSpecies.setViewportView(listFilterSpecies);

        tabbedFilterPane.addTab("Species", tabFilterSpecies);

        listFilterPlants.setModel(new AbstractListModel<String>() {
            String[] strings = { "Plants will be ", "listed here once ", "visualization files", "have been loaded" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listFilterPlants.addListSelectionListener(evt -> jListPlantSelect(evt));
        tabFilterPlants.setViewportView(listFilterPlants);

        tabbedFilterPane.addTab("Genus", tabFilterPlants);

        btnZoomOut.setText("-");
        btnZoomIn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                zoomInButtonClick();
            }
        });
        btnZoomOut.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                zoomOutButtonClick();
            }
        });

        lblZoom.setFont(new Font("Ubuntu", 0, 24)); // NOI18N
        lblZoom.setHorizontalAlignment(SwingConstants.CENTER);
        lblZoom.setText("Zoom");


        /* Sliders */
        sldPlantHeight.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent evt) {
                sldPlantHeightStateChanged(evt);
            }
        });

        sldRenderingThreshold.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent evt) {
                sldRenderingThresholdStateChanged(evt);
            }
        });

        sldPlantHeight.setPaintTicks(true);
        sldPlantHeight.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblPlantHeightSlider.setText("Max Plant Height");

        lblPlantHeightValue.setText("0");
        /* End of Sliders */

        jLabel2.setText("Visibility");

        lblSimulation.setFont(new Font("Ubuntu", 0, 24)); // NOI18N
        lblSimulation.setText("Simulations");

        lblSimType.setText("Type");

        cbxSimulationType.setModel(new DefaultComboBoxModel<String>(new String[] { "None", "Fire" }));
        cbxSimulationType.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbxSimulationTypeActionPerformed(evt);
            }
        });


        chbCanopy.setText("Canopy");
        chbCanopy.doClick();
        pnlVizualizer.canopyCHB = true;
        chbCanopy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chbCanopyActionPerformed(evt);
            }
        });

        chbUndergrowth.setText("Undergrowth");
        chbUndergrowth.doClick();
        pnlVizualizer.undergrowthCHB = true;
        chbUndergrowth.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chbUndergrowthActionPerformed(evt);
            }
        });

        lblThreshold.setText("<html><center>Rendering<br>Threshold</center>");

        /**
         * Editing Here
         */

        javax.swing.GroupLayout pnlSimControlsLayout = new javax.swing.GroupLayout(pnlSimControls);
        pnlSimControls.setLayout(pnlSimControlsLayout);
        pnlSimControlsLayout.setHorizontalGroup(
                pnlSimControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlSimControlsLayout.setVerticalGroup(
                pnlSimControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 160, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlControlsLayout = new javax.swing.GroupLayout(pnlControls);
        pnlControls.setLayout(pnlControlsLayout);
        pnlControlsLayout.setHorizontalGroup(
                pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tabbedFilterPane)
                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                .addGap(32, 32, 32)
                                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                                .addGap(36, 36, 36)
                                                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(pnlSimControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                                                .addComponent(lblSimType)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(cbxSimulationType, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addComponent(sldPlantHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                                .addGap(17, 17, 17)
                                                                .addComponent(lblThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(sldRenderingThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                .addGap(130, 130, 130)
                                                .addComponent(lblPlantHeightValue))
                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                .addGap(73, 73, 73)
                                                .addComponent(lblPlantHeightSlider))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlsLayout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(chbUndergrowth)
                                                .addGap(18, 18, 18)
                                                .addComponent(chbCanopy)))
                                .addContainerGap(39, Short.MAX_VALUE))
                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                .addGap(69, 69, 69)
                                                .addComponent(lblSimulation))
                                        .addGroup(pnlControlsLayout.createSequentialGroup()
                                                .addGap(113, 113, 113)
                                                .addComponent(jLabel2)))
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlControlsLayout.setVerticalGroup(
                pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlsLayout.createSequentialGroup()
                                .addContainerGap(24, Short.MAX_VALUE)
                                .addComponent(lblSimulation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbxSimulationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblSimType))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pnlSimControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)
                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sldRenderingThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(lblPlantHeightSlider)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPlantHeightValue)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sldPlantHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(chbCanopy)
                                        .addComponent(chbUndergrowth))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tabbedFilterPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        /** End **/
        menuBar.setName(""); // NOI18N

        mbFIleOption.setText("File");

        miLoadFIles.setText("Load Files");
        miLoadFIles.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miLoadFIlesActionPerformed(evt);
            }
        });
        mbFIleOption.add(miLoadFIles);

        miRestart.setText("Restart");
        miRestart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miRestartActionPerformed(evt);
            }
        });
        mbFIleOption.add(miRestart);

        miExit.setText("Exit");
        miExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mbFIleOption.add(miExit);

        menuBar.add(mbFIleOption);

        setJMenuBar(menuBar);

/**Editing Here **/
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlVizualizer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlVizualizer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
/** End **/
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sldRenderingThresholdStateChanged(ChangeEvent evt) {
        JSpinner source = (JSpinner) evt.getSource(); //gets the event type
        int value = (Integer) source.getValue();
        pnlVizualizer.setViewingThreshold(value);
    }

    private void zoomOutButtonClick() {
        pnlVizualizer.zoomOutTenPercent();
    }

    private void zoomInButtonClick() {
        pnlVizualizer.zoomInTenPercent();
    }


    /**JList methods for filtering through species.
     * Access Fileloader static variables
     * @param evt
     */
    private void jListPlantSelect(ListSelectionEvent evt) {
        //set text on right here
        String s = (String) listFilterPlants.getSelectedValue();
        if(s==null){return;}
        String[][] spc = FileLoader.getSpcKey();
        for(int i=0;i<spc.length;i++){
            if(s.equals(spc[i][1].split(" ")[0])&&!FileLoader.getSpcDraw()[i]){
                System.out.println(s);
                System.out.println(spc[i][1].split(" ")[0]);
                FileLoader.setSpcDraw(i,true);
                break;
            }
            else if(s.equals(spc[i][1].split(" ")[0])&&FileLoader.getSpcDraw()[i]){
                System.out.println(s);
                System.out.println(spc[i][1].split(" ")[0]);
                FileLoader.setSpcDraw(i,false);
                break;
            }
        }

        //UserView.pnlVizualizer.repaint();
        localController.updateView();
    }
    private void jListSpeciesSelect(ListSelectionEvent evt) {
        //set text on right here
        String s = (String) listFilterSpecies.getSelectedValue();
        if(s==null){return;}
        String[][] spc = FileLoader.getSpcKey();
        for(int i=0;i<spc.length;i++){
            if(s.equals(spc[i][0])&&!FileLoader.getSpcDraw()[i]){
                FileLoader.setSpcDraw(i,true);
            }
            else if(s.equals(spc[i][0])&&FileLoader.getSpcDraw()[i]){
                FileLoader.setSpcDraw(i,false);
            }
        }
        //UserView.pnlVizualizer.repaint();
        localController.updateView();
    }

    /**
     * onClickEventListener for "File" menu item
     * Opens FileLoaderDialog and sets it to visible
     * @param evt
     */
    private void miLoadFIlesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miLoadFIlesActionPerformed
        FileLoaderDialog dialog = new FileLoaderDialog(this, rootPaneCheckingEnabled);
        dialog.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_miLoadFIlesActionPerformed
    /**
     * onClickEventListener for "Exit" menu item
     * Exits application
     * @param evt
     */
    private void miExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_miExitActionPerformed
    /**
     * onClickEventListener for Simulation Combobox
     * Gets selected type and displays the relevant controls for the simulation
     * @param evt
     */
    private void cbxSimulationTypeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbxSimulationTypeActionPerformed
        switch(cbxSimulationType.getSelectedItem().toString())
        {
            case "None":
                selectedSimType = false;
                for (Component component: pnlSimControls.getComponents()) {
                    if(component instanceof JButton){
                        pnlSimControls.remove(component);
                    }
                }
                pnlSimControls.revalidate();
                pnlSimControls.repaint();
                 break;
            case "Fire":

                if(!selectedSimType){
                    pnlSimControls.setLayout(new BoxLayout(pnlSimControls,BoxLayout.PAGE_AXIS));
                    JButton btnWind = new JButton("Set Wind");
                    JButton btnStartFire= new JButton("Start Fire");
                    btnWind.setAlignmentX(Component.CENTER_ALIGNMENT);
                    btnStartFire.setAlignmentX(Component.CENTER_ALIGNMENT);
                    btnStartFire.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent actionEvent) {
                            //pnlVizualizer.startFireClicked = true;
                            JButton pauseButton = new JButton("Pause");
                            JButton playButton = new JButton("Play");
                            //JButton resetButton = new JButton("Reset");
                            JButton stopButton = new JButton("Stop");

                            pauseButton.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {

                                }
                            });

                            playButton.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {

                                }
                            });

                           /* resetButton.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    pnlVizualizer.paused = false;
                                    pnlVizualizer.done = true;
                                }
                            });
                           */
                            stopButton.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {

                                }
                            });

                            pnlSimControls.add(playButton);
                            pnlSimControls.add(pauseButton);
                            //pnlSimControls.add(resetButton);
                            pnlSimControls.add(stopButton);

                            pnlSimControls.revalidate();
                            pnlSimControls.repaint();

                            //playButton.setAlignmentX(Component.CENTER_ALIGNMENT);
                            //pauseButton.setAlignmentX(Component.CENTER_ALIGNMENT);
                            //pauseButton.setVisible(true);
                            startFireSim();
                        }
                    });
                    btnWind.addActionListener(actionEvent -> {
                        WindSetDialog dialog = new WindSetDialog(UserView.this,rootPaneCheckingEnabled);
                        dialog.setVisible(true);
                        windX = dialog.getwindX();
                        windY = dialog.getwindY();

                    });
                    pnlSimControls.add(btnWind);
                    pnlSimControls.add(btnStartFire);
                    pnlSimControls.revalidate();
                    pnlSimControls.repaint();
                }
                selectedSimType = true;
                break;


        }// TODO add your handling code here:
    }//GEN-LAST:event_cbxSimulationTypeActionPerformed

    private void startFireSim() {
        pnlVizualizer.startFireClicked=true;
    }

    public static int getWindX(){
        return windX;
    }

    public static int getWindY(){
        return windY;
    }
    /**
    * onClickEventListener for "Restart" menu item
    * Restarts application 
    * @param evt
    */
    private void miRestartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miRestartActionPerformed
          if(JOptionPane.showConfirmDialog(null, "Are you sure you want to restart?") == JOptionPane.YES_OPTION){
              // TODO: Write clear program code here
          }
        
    }//GEN-LAST:event_miRestartActionPerformed

    private void chbCanopyActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chbCanopyActionPerformed
        // TODO add your handling code here:
        pnlVizualizer.canopyCHB = chbCanopy.isSelected();
        localController.updateView();
    }//GEN-LAST:event_chbCanopyActionPerformed

    private void chbUndergrowthActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chbCanopyActionPerformed
        // TODO add your handling code here:
        pnlVizualizer.undergrowthCHB = chbUndergrowth.isSelected();
        localController.updateView();
    }//GEN-LAST:event_chbCanopyActionPerformed

    private void sldPlantHeightStateChanged(ChangeEvent evt) {

        JSlider source = (JSlider) evt.getSource(); //gets the event type
        pnlVizualizer.heightSliderValue = source.getValue();
        //sliders only work in integers
        if(source.getValue()<=sldPlantHeight.getMinimum()){
             //if slider value minimum, slider label resets to default
        }else{
            lblPlantHeightValue.setText(Double.toString(source.getValue()));
        }
        pnlVizualizer.repaint();
    }
    //list filtration
    private void selectListSPC(ActionEvent evt){
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Thread currentThread = currentThread();
        System.out.println(currentThread());

        /* Create and display the form */
        EventQueue.invokeLater(() -> new UserView().setVisible(true));
    }

    public static void setPlantHeightSliderValues(float min,float max){
        sldPlantHeight.setMinimum(Math.round(min-1));
        sldPlantHeight.setValue(Math.round(min-1));
        sldPlantHeight.setMaximum(Math.round(max+1));
    }
    public static int getPlantHeightMin(){
        if (sldPlantHeight !=null) {
            return sldPlantHeight.getMinimum();
        }
        else{
            return -1;
        }
    }

      /**
     * Gets Jlabel with embedded image to display on visualizer panel
     * @param
     * @throws IOException
     */
    public static void setVisualizerScreen(JLabel vizLabel) throws IOException {
        vizLabel.setBounds(0, 0, pnlVizualizer.getWidth(), pnlVizualizer.getHeight());
        pnlVizualizer.add(vizLabel);
        pnlVizualizer.revalidate();
        pnlVizualizer.repaint();
    }
    /**
     * Accessor method for Visualizer Panel
     * @return
     */
    public static JPanel getPnlVizualizer(){
        return pnlVizualizer;
    }
    /**
     * Accessor method for Species JList Filter pane
     * @return
     */
    public static JList getlistFilterSpecies(){
        return listFilterSpecies;
    }
    /**
     * Accessor method for Genus JList Filter pane
     * @return
     */
    public static JList getlistFilterGenus(){
        return listFilterPlants;
    }

}
