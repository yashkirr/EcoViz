/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import static java.lang.Thread.currentThread;

/**
 *
 * @author yashkir
 */
public class UserView extends JFrame{

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnZoomIn;
    private JButton btnZoomOut;
    private JComboBox<String> cbxSimulationType;
    private JCheckBox chbCanopy;
    private JCheckBox chbUndergrowth;
    private JLabel lblPlantHeightSlider;
    private JLabel jLabel2;
    private JLabel lblFilter;
    private JLabel lblSimType;
    private JLabel lblSimulation;
    private JLabel lblSimulationControlsHelp;
    private JLabel lblZoom;
    private static JList<String> listFilterPlants;
    private static JList<String> listFilterSpecies;
    private JMenu mbFIleOption;
    private JMenuBar menuBar;
    private JMenuItem miExit;
    private JMenuItem miLoadFIles;
    private JMenuItem miRestart;
    private JPanel pnlControls;
    private JPanel pnlSimControls;
    protected static VizPanel pnlVizualizer;
    private static JSlider sldPlantHeight;
    private JScrollPane tabFilterPlants;
    private JScrollPane tabFilterSpecies;
    private JTabbedPane tabbedFilterPane;
    // End of variables declaration//GEN-END:variables

    //Self-declared Variables
    public static Controller localController;
    private boolean selectedSimType = false;

    /**
     * Creates new form UserView
     */
    public UserView() {
        initComponents();
        this.setResizable(false);
        localController = new Controller(this);
        localController.setVisualizerCursor(Cursor.DEFAULT_CURSOR);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlVizualizer = new VizPanel();
        pnlControls = new JPanel();
        btnZoomIn = new JButton();
        tabbedFilterPane = new JTabbedPane();
        tabFilterSpecies = new JScrollPane();
        listFilterSpecies = new JList<String>();
        tabFilterPlants = new JScrollPane();
        listFilterPlants = new JList<String>();
        btnZoomOut = new JButton();
        lblZoom = new JLabel();
        lblFilter = new JLabel();
        sldPlantHeight = new JSlider();
        lblPlantHeightSlider = new JLabel();
        jLabel2 = new JLabel();
        lblSimulation = new JLabel();
        lblSimType = new JLabel();
        cbxSimulationType = new JComboBox<String>();
        pnlSimControls = new JPanel();
        lblSimulationControlsHelp = new JLabel();
        chbCanopy = new JCheckBox();
        chbUndergrowth = new JCheckBox();
        menuBar = new JMenuBar();
        mbFIleOption = new JMenu();
        miLoadFIles = new JMenuItem();
        miRestart = new JMenuItem();
        miExit = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("EcoViz");

        pnlVizualizer.setName(""); // NOI18N

        GroupLayout pnlVizualizerLayout = new GroupLayout(pnlVizualizer);
        pnlVizualizer.setLayout(pnlVizualizerLayout);
        pnlVizualizerLayout.setHorizontalGroup(
            pnlVizualizerLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 910, Short.MAX_VALUE)
        );
        pnlVizualizerLayout.setVerticalGroup(
            pnlVizualizerLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlControls.setBorder(BorderFactory.createEtchedBorder());
        pnlControls.setForeground(new Color(56, 60, 74));

        btnZoomIn.setText("+");

        listFilterSpecies.setModel(new AbstractListModel<String>() {
            String[] strings = { "Plants will be ", "listed here once ", "visualization files", "have been loaded" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listFilterSpecies.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent evt) {
                jListSpeciesSelect(evt);
            }
        });
        tabFilterSpecies.setViewportView(listFilterSpecies);

        tabbedFilterPane.addTab("Species", tabFilterSpecies);

        listFilterPlants.setModel(new AbstractListModel<String>() {
            String[] strings = { "Plants will be ", "listed here once ", "visualization files", "have been loaded" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listFilterPlants.addListSelectionListener(evt -> jListPlantSelect(evt));
        tabFilterPlants.setViewportView(listFilterPlants);

        tabbedFilterPane.addTab("Genus", tabFilterPlants);

        btnZoomOut.setText("-");

        lblZoom.setFont(new Font("Ubuntu", 0, 24)); // NOI18N
        lblZoom.setHorizontalAlignment(SwingConstants.CENTER);
        lblZoom.setText("Zoom");

        lblFilter.setFont(new Font("Ubuntu", 0, 24)); // NOI18N
        lblFilter.setText("Filter");

        sldPlantHeight.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent evt) {
                sldPlantHeightStateChanged(evt);
            }
        });

        lblPlantHeightSlider.setText("Plant Height");

        jLabel2.setText("Visibility");

        lblSimulation.setFont(new Font("Ubuntu", 0, 24)); // NOI18N
        lblSimulation.setText("Simulations");

        lblSimType.setText("Type");

        cbxSimulationType.setModel(new DefaultComboBoxModel<String>(new String[] { "None", "Fire" }));
        cbxSimulationType.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbxSimulationTypeActionPerformed(evt);
            }
        });

        lblSimulationControlsHelp.setText("<html>\nControls will appear once<br> a simulation type is<br> selected.");
        //pnlSimControls.setViewportView(lblSimulationControlsHelp);

        chbCanopy.setText("Canopy");
        chbCanopy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chbCanopyActionPerformed(evt);
            }
        });

        chbUndergrowth.setText("Undergrowth");

        GroupLayout pnlControlsLayout = new GroupLayout(pnlControls);
        pnlControls.setLayout(pnlControlsLayout);
        pnlControlsLayout.setHorizontalGroup(
            pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(tabbedFilterPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(GroupLayout.Alignment.TRAILING, pnlControlsLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnZoomIn, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnZoomOut, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addGroup(pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(lblFilter))
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(lblPlantHeightSlider))
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlSimControls)
                            .addGroup(pnlControlsLayout.createSequentialGroup()
                                .addComponent(lblSimType)
                                .addGap(18, 18, 18)
                                .addGroup(pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxSimulationType, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblZoom)))))
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(pnlControlsLayout.createSequentialGroup()
                                .addComponent(chbCanopy)
                                .addGap(18, 18, 18)
                                .addComponent(chbUndergrowth))
                            .addComponent(sldPlantHeight, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(lblSimulation))
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabel2)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlControlsLayout.setVerticalGroup(
            pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblSimulation)
                .addGap(18, 18, 18)
                .addGroup(pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSimType)
                    .addComponent(cbxSimulationType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pnlSimControls, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblZoom)
                .addGap(18, 18, 18)
                .addGroup(pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnZoomIn)
                    .addComponent(btnZoomOut))
                .addGap(28, 28, 28)
                .addComponent(lblFilter)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPlantHeightSlider)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sldPlantHeight, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlControlsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(chbCanopy)
                    .addComponent(chbUndergrowth))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(tabbedFilterPane, GroupLayout.PREFERRED_SIZE, 257, GroupLayout.PREFERRED_SIZE))
        );

        menuBar.setName(""); // NOI18N

        mbFIleOption.setText("File");

        miLoadFIles.setText("Load Files");
        miLoadFIles.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miLoadFIlesActionPerformed(evt);
            }
        });
        mbFIleOption.add(miLoadFIles);

        miRestart.setText("Restart");
        miRestart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miRestartActionPerformed(evt);
            }
        });
        mbFIleOption.add(miRestart);

        miExit.setText("Exit");
        miExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mbFIleOption.add(miExit);

        menuBar.add(mbFIleOption);

        setJMenuBar(menuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlVizualizer, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControls, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(pnlVizualizer, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlControls, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zoomOutButtonClick() {
        pnlVizualizer.zoomOutTenPercent();
    }

    private void zoomInButtonClick() {
        pnlVizualizer.zoomInTenPercent();
    }

    private void btnZoomOutActionPerformed(ActionEvent evt) {

    }

    /**JList methods for filtering through species.
     * Access Fileloader static variables
     * @param evt
     */
    private void jListPlantSelect(ListSelectionEvent evt) {
        //set text on right here
        String s = (String) listFilterPlants.getSelectedValue();
        if(s==null){return;}
        String[][] spc = FileLoader.getSpcKey();
        for(int i=0;i<spc.length;i++){
            if(s.equals(spc[i][1].split(" ")[0])&&!FileLoader.getSpcDraw()[i]){
                System.out.println(s);
                System.out.println(spc[i][1].split(" ")[0]);
                FileLoader.setSpcDraw(i,true);
                break;
            }
            else if(s.equals(spc[i][1].split(" ")[0])&&FileLoader.getSpcDraw()[i]){
                System.out.println(s);
                System.out.println(spc[i][1].split(" ")[0]);
                FileLoader.setSpcDraw(i,false);
                break;
            }
        }

        //UserView.pnlVizualizer.repaint();
        localController.updateView();
    }
    private void jListSpeciesSelect(ListSelectionEvent evt) {
        //set text on right here
        String s = (String) listFilterSpecies.getSelectedValue();
        if(s==null){return;}
        String[][] spc = FileLoader.getSpcKey();
        for(int i=0;i<spc.length;i++){
            if(s.equals(spc[i][0])&&!FileLoader.getSpcDraw()[i]){
                FileLoader.setSpcDraw(i,true);
            }
            else if(s.equals(spc[i][0])&&FileLoader.getSpcDraw()[i]){
                FileLoader.setSpcDraw(i,false);
            }
        }
        //UserView.pnlVizualizer.repaint();
        localController.updateView();
    }

    /**
     * onClickEventListener for "File" menu item
     * Opens FileLoaderDialog and sets it to visible
     * @param evt
     */
    private void miLoadFIlesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miLoadFIlesActionPerformed
        FileLoaderDialog dialog = new FileLoaderDialog(this, rootPaneCheckingEnabled);
        dialog.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_miLoadFIlesActionPerformed
    /**
     * onClickEventListener for "Exit" menu item
     * Exits application
     * @param evt
     */
    private void miExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_miExitActionPerformed
    /**
     * onClickEventListener for Simulation Combobox
     * Gets selected type and displays the relevant controls for the simulation
     * @param evt
     */
    private void cbxSimulationTypeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbxSimulationTypeActionPerformed
        switch(cbxSimulationType.getSelectedItem().toString())
        {
            case "None":
                selectedSimType = false;
                for (Component component: pnlSimControls.getComponents()) {
                    if(component instanceof JButton){
                        pnlSimControls.remove(component);
                    }
                }
                pnlSimControls.revalidate();
                pnlSimControls.repaint();
                 break;
            case "Fire":

                if(!selectedSimType){
                    pnlSimControls.setLayout(new BoxLayout(pnlSimControls,BoxLayout.PAGE_AXIS));
                    JButton btnWind = new JButton("Set Wind");
                    JButton btnStartFire= new JButton("Start Fire");
                    btnWind.setAlignmentX(Component.CENTER_ALIGNMENT);
                    btnStartFire.setAlignmentX(Component.CENTER_ALIGNMENT);
                    btnWind.addActionListener(actionEvent -> {
                        WindSetDialog dialog = new WindSetDialog(UserView.this,rootPaneCheckingEnabled);
                        dialog.setVisible(true);
                    });
                    pnlSimControls.add(btnWind);
                    pnlSimControls.add(btnStartFire);
                    pnlSimControls.revalidate();
                    pnlSimControls.repaint();
                }
                selectedSimType = true;
                break;


        }// TODO add your handling code here:
    }//GEN-LAST:event_cbxSimulationTypeActionPerformed

    /**
    * onClickEventListener for "Restart" menu item
    * Restarts application 
    * @param evt
    */
    private void miRestartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miRestartActionPerformed
          if(JOptionPane.showConfirmDialog(null, "Are you sure you want to restart?") == JOptionPane.YES_OPTION){
              // TODO: Write clear program code here
          }
        
    }//GEN-LAST:event_miRestartActionPerformed

    private void chbCanopyActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chbCanopyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbCanopyActionPerformed


    private void sldPlantHeightStateChanged(ChangeEvent evt) {

        JSlider source = (JSlider) evt.getSource(); //gets the event type
        pnlVizualizer.heightSliderValue = source.getValue();
        //sliders only work in integers
        if(source.getValue()<=sldPlantHeight.getMinimum()){
            lblPlantHeightSlider.setText("Plant Height"); //if slider value minimum, slider label resets to default
        }else{
            lblPlantHeightSlider.setText("Selected Plant Height: " + source.getValue());
        }
        pnlVizualizer.repaint();
    }
    //list filtration
    private void selectListSPC(ActionEvent evt){
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Thread currentThread = currentThread();
        System.out.println(currentThread());

        /* Create and display the form */
        EventQueue.invokeLater(() -> new UserView().setVisible(true));
    }

    public static void setPlantHeightSliderValues(float min,float max){
        sldPlantHeight.setMinimum(Math.round(min-1));
        sldPlantHeight.setValue(Math.round(min-1));
        sldPlantHeight.setMaximum(Math.round(max+1));
    }
    public static int getPlantHeightMin(){
        if (sldPlantHeight !=null) {
            return sldPlantHeight.getMinimum();
        }
        else{
            return -1;
        }
    }

      /**
     * Gets Jlabel with embedded image to display on visualizer panel
     * @param
     * @throws IOException
     */
    public static void setVisualizerScreen(JLabel vizLabel) throws IOException {
        vizLabel.setBounds(0, 0, pnlVizualizer.getWidth(), pnlVizualizer.getHeight());
        pnlVizualizer.add(vizLabel);
        pnlVizualizer.revalidate();
        pnlVizualizer.repaint();
    }
    /**
     * Accessor method for Visualizer Panel
     * @return
     */
    public static JPanel getPnlVizualizer(){
        return pnlVizualizer;
    }
    /**
     * Accessor method for Species JList Filter pane
     * @return
     */
    public static JList getlistFilterSpecies(){
        return listFilterSpecies;
    }
    /**
     * Accessor method for Genus JList Filter pane
     * @return
     */
    public static JList getlistFilterGenus(){
        return listFilterPlants;
    }

}
